// Copyright 2022 SaferPlace

// @generated by protoc-gen-es v0.0.9 with parameter "target=js+dts"
// @generated from file review/v1/review.proto (package review.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Incident, Resolution} from "../../incident/v1/incident_pb.js";

/**
 * StreamIncidentsRequest is empty
 *
 * @generated from message review.v1.StreamIncidentsRequest
 */
export declare class StreamIncidentsRequest extends Message<StreamIncidentsRequest> {
  constructor(data?: PartialMessage<StreamIncidentsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "review.v1.StreamIncidentsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamIncidentsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamIncidentsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamIncidentsRequest;

  static equals(a: StreamIncidentsRequest | PlainMessage<StreamIncidentsRequest> | undefined, b: StreamIncidentsRequest | PlainMessage<StreamIncidentsRequest> | undefined): boolean;
}

/**
 * StreamIncidentsResponse is a stream of incidents.
 *
 * @generated from message review.v1.StreamIncidentsResponse
 */
export declare class StreamIncidentsResponse extends Message<StreamIncidentsResponse> {
  /**
   * Incident is the full incident that has been reported.
   *
   * @generated from field: incident.v1.Incident incident = 1;
   */
  incident?: Incident;

  constructor(data?: PartialMessage<StreamIncidentsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "review.v1.StreamIncidentsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamIncidentsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamIncidentsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamIncidentsResponse;

  static equals(a: StreamIncidentsResponse | PlainMessage<StreamIncidentsResponse> | undefined, b: StreamIncidentsResponse | PlainMessage<StreamIncidentsResponse> | undefined): boolean;
}

/**
 * IncomingIncidentRequest has the incident on which the reviewer should respond.
 *
 * @generated from message review.v1.ReviewIncidentRequest
 */
export declare class ReviewIncidentRequest extends Message<ReviewIncidentRequest> {
  /**
   * Id of the incident that the response is given to
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Comment left by the reviewer
   *
   * @generated from field: string comment = 2;
   */
  comment: string;

  /**
   * Resolution of the review. If the resolution is UNSPECIFIED, it means that
   * the incident has not reached a final review and will be re-scheduled for
   * review.
   *
   * @generated from field: incident.v1.Resolution resolution = 3;
   */
  resolution: Resolution;

  constructor(data?: PartialMessage<ReviewIncidentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "review.v1.ReviewIncidentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReviewIncidentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReviewIncidentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReviewIncidentRequest;

  static equals(a: ReviewIncidentRequest | PlainMessage<ReviewIncidentRequest> | undefined, b: ReviewIncidentRequest | PlainMessage<ReviewIncidentRequest> | undefined): boolean;
}

/**
 * ReviewIncidentResponse is empty
 *
 * @generated from message review.v1.ReviewIncidentResponse
 */
export declare class ReviewIncidentResponse extends Message<ReviewIncidentResponse> {
  constructor(data?: PartialMessage<ReviewIncidentResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "review.v1.ReviewIncidentResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReviewIncidentResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReviewIncidentResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReviewIncidentResponse;

  static equals(a: ReviewIncidentResponse | PlainMessage<ReviewIncidentResponse> | undefined, b: ReviewIncidentResponse | PlainMessage<ReviewIncidentResponse> | undefined): boolean;
}

/**
 * @generated from message review.v1.WaitForIncidentRequest
 */
export declare class WaitForIncidentRequest extends Message<WaitForIncidentRequest> {
  constructor(data?: PartialMessage<WaitForIncidentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "review.v1.WaitForIncidentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForIncidentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForIncidentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForIncidentRequest;

  static equals(a: WaitForIncidentRequest | PlainMessage<WaitForIncidentRequest> | undefined, b: WaitForIncidentRequest | PlainMessage<WaitForIncidentRequest> | undefined): boolean;
}

/**
 * @generated from message review.v1.WaitForIncidentResponse
 */
export declare class WaitForIncidentResponse extends Message<WaitForIncidentResponse> {
  /**
   * Incident is the full incident that has been reported.
   *
   * @generated from field: incident.v1.Incident incident = 1;
   */
  incident?: Incident;

  constructor(data?: PartialMessage<WaitForIncidentResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "review.v1.WaitForIncidentResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForIncidentResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForIncidentResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForIncidentResponse;

  static equals(a: WaitForIncidentResponse | PlainMessage<WaitForIncidentResponse> | undefined, b: WaitForIncidentResponse | PlainMessage<WaitForIncidentResponse> | undefined): boolean;
}

