// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: review/v1/review.proto

package reviewconnect

import (
	v1 "api.safer.place/review/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReviewServiceName is the fully-qualified name of the ReviewService service.
	ReviewServiceName = "review.v1.ReviewService"
)

// ReviewServiceClient is a client for the review.v1.ReviewService service.
type ReviewServiceClient interface {
	StreamIncidents(context.Context, *connect_go.Request[v1.StreamIncidentsRequest]) (*connect_go.ServerStreamForClient[v1.StreamIncidentsResponse], error)
	// ReviewIncident contains a stream of incoming incidents.
	ReviewIncident(context.Context, *connect_go.Request[v1.ReviewIncidentRequest]) (*connect_go.Response[v1.ReviewIncidentResponse], error)
	// WaitForIncident is a long standing RPC call which will only return the
	// incident when it arrives
	WaitForIncident(context.Context, *connect_go.Request[v1.WaitForIncidentRequest]) (*connect_go.Response[v1.WaitForIncidentResponse], error)
}

// NewReviewServiceClient constructs a client for the review.v1.ReviewService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReviewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReviewServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reviewServiceClient{
		streamIncidents: connect_go.NewClient[v1.StreamIncidentsRequest, v1.StreamIncidentsResponse](
			httpClient,
			baseURL+"/review.v1.ReviewService/StreamIncidents",
			opts...,
		),
		reviewIncident: connect_go.NewClient[v1.ReviewIncidentRequest, v1.ReviewIncidentResponse](
			httpClient,
			baseURL+"/review.v1.ReviewService/ReviewIncident",
			opts...,
		),
		waitForIncident: connect_go.NewClient[v1.WaitForIncidentRequest, v1.WaitForIncidentResponse](
			httpClient,
			baseURL+"/review.v1.ReviewService/WaitForIncident",
			opts...,
		),
	}
}

// reviewServiceClient implements ReviewServiceClient.
type reviewServiceClient struct {
	streamIncidents *connect_go.Client[v1.StreamIncidentsRequest, v1.StreamIncidentsResponse]
	reviewIncident  *connect_go.Client[v1.ReviewIncidentRequest, v1.ReviewIncidentResponse]
	waitForIncident *connect_go.Client[v1.WaitForIncidentRequest, v1.WaitForIncidentResponse]
}

// StreamIncidents calls review.v1.ReviewService.StreamIncidents.
func (c *reviewServiceClient) StreamIncidents(ctx context.Context, req *connect_go.Request[v1.StreamIncidentsRequest]) (*connect_go.ServerStreamForClient[v1.StreamIncidentsResponse], error) {
	return c.streamIncidents.CallServerStream(ctx, req)
}

// ReviewIncident calls review.v1.ReviewService.ReviewIncident.
func (c *reviewServiceClient) ReviewIncident(ctx context.Context, req *connect_go.Request[v1.ReviewIncidentRequest]) (*connect_go.Response[v1.ReviewIncidentResponse], error) {
	return c.reviewIncident.CallUnary(ctx, req)
}

// WaitForIncident calls review.v1.ReviewService.WaitForIncident.
func (c *reviewServiceClient) WaitForIncident(ctx context.Context, req *connect_go.Request[v1.WaitForIncidentRequest]) (*connect_go.Response[v1.WaitForIncidentResponse], error) {
	return c.waitForIncident.CallUnary(ctx, req)
}

// ReviewServiceHandler is an implementation of the review.v1.ReviewService service.
type ReviewServiceHandler interface {
	StreamIncidents(context.Context, *connect_go.Request[v1.StreamIncidentsRequest], *connect_go.ServerStream[v1.StreamIncidentsResponse]) error
	// ReviewIncident contains a stream of incoming incidents.
	ReviewIncident(context.Context, *connect_go.Request[v1.ReviewIncidentRequest]) (*connect_go.Response[v1.ReviewIncidentResponse], error)
	// WaitForIncident is a long standing RPC call which will only return the
	// incident when it arrives
	WaitForIncident(context.Context, *connect_go.Request[v1.WaitForIncidentRequest]) (*connect_go.Response[v1.WaitForIncidentResponse], error)
}

// NewReviewServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReviewServiceHandler(svc ReviewServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/review.v1.ReviewService/StreamIncidents", connect_go.NewServerStreamHandler(
		"/review.v1.ReviewService/StreamIncidents",
		svc.StreamIncidents,
		opts...,
	))
	mux.Handle("/review.v1.ReviewService/ReviewIncident", connect_go.NewUnaryHandler(
		"/review.v1.ReviewService/ReviewIncident",
		svc.ReviewIncident,
		opts...,
	))
	mux.Handle("/review.v1.ReviewService/WaitForIncident", connect_go.NewUnaryHandler(
		"/review.v1.ReviewService/WaitForIncident",
		svc.WaitForIncident,
		opts...,
	))
	return "/review.v1.ReviewService/", mux
}

// UnimplementedReviewServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReviewServiceHandler struct{}

func (UnimplementedReviewServiceHandler) StreamIncidents(context.Context, *connect_go.Request[v1.StreamIncidentsRequest], *connect_go.ServerStream[v1.StreamIncidentsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("review.v1.ReviewService.StreamIncidents is not implemented"))
}

func (UnimplementedReviewServiceHandler) ReviewIncident(context.Context, *connect_go.Request[v1.ReviewIncidentRequest]) (*connect_go.Response[v1.ReviewIncidentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("review.v1.ReviewService.ReviewIncident is not implemented"))
}

func (UnimplementedReviewServiceHandler) WaitForIncident(context.Context, *connect_go.Request[v1.WaitForIncidentRequest]) (*connect_go.Response[v1.WaitForIncidentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("review.v1.ReviewService.WaitForIncident is not implemented"))
}
