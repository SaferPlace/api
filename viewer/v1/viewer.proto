// Copyright 2023 SaferPlace

syntax = "proto3";

package viewer.v1;

import "google/protobuf/timestamp.proto";
import "incident/v1/incident.proto";

option go_package = "api.safer.place/viewer/v1;viewer";

// ViewerService provices the ability to view incidents.
service ViewerService {
    // ViewInRadius provides all incidents within a given radius from a
    // given position.
    rpc ViewInRadius(ViewInRadiusRequest) returns (ViewInRadiusResponse);
    // ViewIncident displays the incident information for the specified ID.
    rpc ViewIncident(ViewIncidentRequest) returns (ViewIncidentResponse);
    // ViewAlertingIncidents shows the incidents in the specified area of interest
    rpc ViewAlerting(ViewAlertingRequest) returns (ViewAlertingResponse);
}

// ViewInRadiusRequest shows all incidents within specified radius (in meters).
message ViewInRadiusRequest {
    // Center of the search radius
    incident.v1.Coordinates center = 1;
    // Radius from the place that the incident happened in, in meters.
    double radius = 2;
}

message ViewInRadiusResponse {
    repeated incident.v1.Incident incidents = 1;
}

// ViewIncidentRequest will show the incident based on the given id.
message ViewIncidentRequest {
    string id = 1;
}

// ViewIncidentResponse returns the incident for review.
message ViewIncidentResponse {
    incident.v1.Incident incident = 1;
}

// ViewAlertingRequest allows to specify which alerts to view which are alerting.
message ViewAlertingRequest {
    Region region = 1;
    // since allows to specify when is the last incident timestamp. that we want to use. 
    google.protobuf.Timestamp since = 2;
}

// ViewAlertingResponse returns the list of incidents.
message ViewAlertingResponse {
    repeated incident.v1.Incident incidents = 1;
}

// Region defines a block of coordinates which can be used for getting incidents without revealing
// the precise location of the user, but rather multiple small requests can be made around the user.
// This is formed by creating a box where the area of interest lies between north and south, and
// east and west.
//   (north <= $lattitude <= south) && (east <= $longitude <= west)
message Region {
    double north = 1;
    double south = 2;
    double east = 3;
    double west = 4;
}
