// Copyright 2022 SaferPlace

// @generated by protoc-gen-es v1.3.0 with parameter "target=js+dts"
// @generated from file incident/v1/incident.proto (package incident.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Rough description of the location of incident.
 *
 * @generated from enum incident.v1.Location
 */
export declare enum Location {
  /**
   * Unspecified should not be used. It will be automatically rejected.
   *
   * @generated from enum value: LOCATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The incident happened outdoors.
   *
   * @generated from enum value: LOCATION_OUTSIDE = 1;
   */
  OUTSIDE = 1,

  /**
   * The incident happened indoors.
   *
   * @generated from enum value: LOCATION_INSIDE = 2;
   */
  INSIDE = 2,

  /**
   * The incident happened inside a moving vehicle.
   *
   * @generated from enum value: LOCATION_TRANSPORTATION = 3;
   */
  TRANSPORTATION = 3,
}

/**
 * Transportation defines the method of transportation for the incident.
 *
 * @generated from enum incident.v1.Transportation
 */
export declare enum Transportation {
  /**
   * @generated from enum value: TRANSPORTATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TRANSPORTATION_BUS = 1;
   */
  BUS = 1,

  /**
   * @generated from enum value: TRANSPORTATION_TRAIN = 2;
   */
  TRAIN = 2,

  /**
   * @generated from enum value: TRANSPORTATION_TRAM = 3;
   */
  TRAM = 3,

  /**
   * @generated from enum value: TRANSPORTATION_TAXI = 4;
   */
  TAXI = 4,
}

/**
 * Resolution defines how the incident was resolved, or not yet.
 *
 * @generated from enum incident.v1.Resolution
 */
export declare enum Resolution {
  /**
   * @generated from enum value: RESOLUTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOLUTION_REJECTED = 1;
   */
  REJECTED = 1,

  /**
   * @generated from enum value: RESOLUTION_ACCEPTED = 2;
   */
  ACCEPTED = 2,

  /**
   * @generated from enum value: RESOLUTION_ALERTED = 3;
   */
  ALERTED = 3,
}

/**
 * Incident defines an individual incident as it happened.
 *
 * @generated from message incident.v1.Incident
 */
export declare class Incident extends Message<Incident> {
  /**
   * ID of the report. This would be generated on ingestion, and therefore
   * does not have to be specified by the client as it will be overriden.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Timestamp at which the incident occured.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * Location of the incident. Since an incident can take place on a moving
   * vehicle, or is related to a moving vehicle, the specific coordinates
   * make less sense.
   *
   * @generated from field: incident.v1.Location location = 3;
   */
  location: Location;

  /**
   * Coordinates at which the incident occured.
   *
   * @generated from field: incident.v1.Coordinates coordinates = 4;
   */
  coordinates?: Coordinates;

  /**
   * Transportation defines the method of transportation on which the
   * incident occured.
   *
   * @generated from field: incident.v1.Transportation transportation_mode = 5;
   */
  transportationMode: Transportation;

  /**
   * Identifier of the transportation mode. This is context specific and can
   * be the bus number, licence place, train line, bus stop number.
   *
   * @generated from field: string transportation_identifier = 6;
   */
  transportationIdentifier: string;

  /**
   * Description provided by the user when sending the incident.
   *
   * @generated from field: string description = 7;
   */
  description: string;

  /**
   * Resolution of the incident.
   *
   * @generated from field: incident.v1.Resolution resolution = 8;
   */
  resolution: Resolution;

  /**
   * Comments provided by the reviewers.
   *
   * @generated from field: repeated incident.v1.Comment reviewer_comments = 9;
   */
  reviewerComments: Comment[];

  /**
   * Tags added by the reviewer to categorize the incident. This might be
   * updated in the future to maybe not be free-form but rather just specific
   * categories.
   *
   * @generated from field: repeated string tags = 10;
   */
  tags: string[];

  /**
   * ImageID is the ID of the uploaded image for this incident. It is assumed to already
   * exist and be available at the time of incident creation.
   *
   * @generated from field: string image_id = 11;
   */
  imageId: string;

  constructor(data?: PartialMessage<Incident>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "incident.v1.Incident";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Incident;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Incident;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Incident;

  static equals(a: Incident | PlainMessage<Incident> | undefined, b: Incident | PlainMessage<Incident> | undefined): boolean;
}

/**
 * @generated from message incident.v1.Coordinates
 */
export declare class Coordinates extends Message<Coordinates> {
  /**
   * @generated from field: double lat = 1;
   */
  lat: number;

  /**
   * @generated from field: double lon = 2;
   */
  lon: number;

  constructor(data?: PartialMessage<Coordinates>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "incident.v1.Coordinates";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coordinates;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coordinates;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coordinates;

  static equals(a: Coordinates | PlainMessage<Coordinates> | undefined, b: Coordinates | PlainMessage<Coordinates> | undefined): boolean;
}

/**
 * Comment left by the reviewer.
 *
 * @generated from message incident.v1.Comment
 */
export declare class Comment extends Message<Comment> {
  /**
   * Timestamp (unix) of the comment, in seconds.
   *
   * @generated from field: int64 timestamp = 1;
   */
  timestamp: bigint;

  /**
   * AuthorID is the author of the comment
   *
   * @generated from field: string author_id = 2;
   */
  authorId: string;

  /**
   * Message left in the comment
   *
   * @generated from field: string message = 3;
   */
  message: string;

  /**
   * Resolution from the comment, allows to keep track of the changes
   *
   * @generated from field: incident.v1.Resolution resolution = 4;
   */
  resolution: Resolution;

  constructor(data?: PartialMessage<Comment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "incident.v1.Comment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment;

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean;
}

