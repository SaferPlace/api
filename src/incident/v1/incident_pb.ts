// Copyright 2022 SaferPlace

// @generated by protoc-gen-es v0.0.9 with parameter "target=ts"
// @generated from file incident/v1/incident.proto (package incident.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * Resolution defines how the incident was resolved, or not yet.
 *
 * @generated from enum incident.v1.Resolution
 */
export enum Resolution {
  /**
   * @generated from enum value: RESOLUTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOLUTION_REJECTED = 1;
   */
  REJECTED = 1,

  /**
   * @generated from enum value: RESOLUTION_ACCEPTED = 2;
   */
  ACCEPTED = 2,

  /**
   * @generated from enum value: RESOLUTION_ALERTED = 3;
   */
  ALERTED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Resolution)
proto3.util.setEnumType(Resolution, "incident.v1.Resolution", [
  { no: 0, name: "RESOLUTION_UNSPECIFIED" },
  { no: 1, name: "RESOLUTION_REJECTED" },
  { no: 2, name: "RESOLUTION_ACCEPTED" },
  { no: 3, name: "RESOLUTION_ALERTED" },
]);

/**
 * Incident defines an individual incident as it happened.
 *
 * @generated from message incident.v1.Incident
 */
export class Incident extends Message<Incident> {
  /**
   * ID of the report. This would be generated on ingestion, and therefore
   * does not have to be specified by the client as it will be overriden.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Timestamp (unix) at which the incident occured, in seconds.
   *
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  /**
   * Lat (lattitude) of the incident.
   *
   * @generated from field: float lat = 3;
   */
  lat = 0;

  /**
   * Lon (Longitude) of the incident.
   *
   * @generated from field: float lon = 4;
   */
  lon = 0;

  /**
   * Description provided by the user when sending the incident.
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * Resolution of the incident.
   *
   * @generated from field: incident.v1.Resolution resolution = 6;
   */
  resolution = Resolution.UNSPECIFIED;

  /**
   * Comments provided by the reviewers.
   *
   * @generated from field: repeated incident.v1.Comment reviewer_comments = 7;
   */
  reviewerComments: Comment[] = [];

  /**
   * Tags added by the reviewer to categorize the incident. This might be
   * updated in the future to maybe not be free-form but rather just specific
   * categories.
   *
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<Incident>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "incident.v1.Incident";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lat", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "lon", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "resolution", kind: "enum", T: proto3.getEnumType(Resolution) },
    { no: 7, name: "reviewer_comments", kind: "message", T: Comment, repeated: true },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Incident {
    return new Incident().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Incident {
    return new Incident().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Incident {
    return new Incident().fromJsonString(jsonString, options);
  }

  static equals(a: Incident | PlainMessage<Incident> | undefined, b: Incident | PlainMessage<Incident> | undefined): boolean {
    return proto3.util.equals(Incident, a, b);
  }
}

/**
 * Comment left by the reviewer.
 *
 * @generated from message incident.v1.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * Timestamp (unix) of the comment, in seconds.
   *
   * @generated from field: int64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * AuthorID is the author of the comment
   *
   * @generated from field: string author_id = 2;
   */
  authorId = "";

  /**
   * Message left in the comment
   *
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "incident.v1.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "author_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

