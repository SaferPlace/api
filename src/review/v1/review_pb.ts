// Copyright 2022 SaferPlace

// @generated by protoc-gen-es v0.0.9 with parameter "target=ts"
// @generated from file review/v1/review.proto (package review.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {Incident, Resolution} from "../../incident/v1/incident_pb.js";

/**
 * IncomingIncidentRequest has the incident on which the reviewer should respond.
 *
 * @generated from message review.v1.ReviewIncidentRequest
 */
export class ReviewIncidentRequest extends Message<ReviewIncidentRequest> {
  /**
   * Incident is the full incident that has been reported.
   *
   * @generated from field: incident.v1.Incident incident = 1;
   */
  incident?: Incident;

  constructor(data?: PartialMessage<ReviewIncidentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "review.v1.ReviewIncidentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incident", kind: "message", T: Incident },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReviewIncidentRequest {
    return new ReviewIncidentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReviewIncidentRequest {
    return new ReviewIncidentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReviewIncidentRequest {
    return new ReviewIncidentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReviewIncidentRequest | PlainMessage<ReviewIncidentRequest> | undefined, b: ReviewIncidentRequest | PlainMessage<ReviewIncidentRequest> | undefined): boolean {
    return proto3.util.equals(ReviewIncidentRequest, a, b);
  }
}

/**
 * IncomingIncidentResponse is the response given by the author
 *
 * @generated from message review.v1.ReviewIncidentResponse
 */
export class ReviewIncidentResponse extends Message<ReviewIncidentResponse> {
  /**
   * Id of the incident that the response is given to
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Comment left by the reviewer
   *
   * @generated from field: string comment = 2;
   */
  comment = "";

  /**
   * Resolution of the review. If the resolution is UNSPECIFIED, it means that
   * the incident has not reached a final review and will be re-scheduled for
   * review.
   *
   * @generated from field: incident.v1.Resolution resolution = 3;
   */
  resolution = Resolution.UNSPECIFIED;

  constructor(data?: PartialMessage<ReviewIncidentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "review.v1.ReviewIncidentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resolution", kind: "enum", T: proto3.getEnumType(Resolution) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReviewIncidentResponse {
    return new ReviewIncidentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReviewIncidentResponse {
    return new ReviewIncidentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReviewIncidentResponse {
    return new ReviewIncidentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReviewIncidentResponse | PlainMessage<ReviewIncidentResponse> | undefined, b: ReviewIncidentResponse | PlainMessage<ReviewIncidentResponse> | undefined): boolean {
    return proto3.util.equals(ReviewIncidentResponse, a, b);
  }
}

